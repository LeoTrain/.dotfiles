#!/bin/bash

repos=(
  "$HOME/lab/libft"
  "$HOME/.dotfiles"
  "$HOME/lab/ft_printf"
  "$HOME/lab/get_next_line"
  "$HOME/lab/MiniTalk"
)

read -p "Do you want to pull updates for all repositories? (o/n)" answer
if [[ "$answer" =~ ^[Oo]$ ]]; then
   $SECHO "${YELLOW}Pulling updates for all repositories.${RESET}"
else
	$SECHO "${RED}Pulling updates for all repositories canceled.${RESET}"
  exit 0
fi


all_success=true

for repo in "${repos[@]}"; do
  repo_name=$(basename "$repo")

  if [ ! -d "$repo" ]; then
	$SECHO "${RED}Repository $repo_name does not exist.${RESET}"
    all_success=false
    continue
  fi

  git -C "$repo" fetch

  LOCAL=$(git -C "$repo" rev-parse @)
  REMOTE=$(git -C "$repo" rev-parse @{u} 2>/dev/null)
  BASE=$(git -C "$repo" merge-base @ @{u} 2>/dev/null)

  if [ "$LOCAL" = "$REMOTE" ]; then
    continue
  elif [ "$LOCAL" = "$BASE" ]; then
    read -p "Pull updates for $repo_name? (o/n) " answer
    if [[ "$answer" =~ ^[Oo]$ ]]; then
      if ! git -C "$repo" pull; then
		$SECHO "${RED}Failed to pull updates for $repo_name.${RESET}"
        all_success=false
      fi
    fi
  else
	$SECHO "${RED}Local and remote branches have diverged in $repo_name.${RESET}"
    all_success=false
  fi
done

if [ "$all_success" = true ]; then
	$SECHO "${GREEN}All repositories are up to date.${RESET}"
fi
